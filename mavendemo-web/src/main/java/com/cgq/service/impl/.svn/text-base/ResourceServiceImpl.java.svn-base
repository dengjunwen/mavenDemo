package com.cgq.service.impl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.UUID;

import org.jpedal.exception.PdfException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.cgq.mapper.ResourceMapper;
import com.cgq.model.Page;
import com.cgq.model.Resource;
import com.cgq.service.ResourceService;
import com.cgq.util.CheckUtil;
import com.cgq.util.DateProcess;
import com.cgq.util.DocumentUtil;
import com.cgq.util.FileSaveUtil;
import com.cgq.util.ResultCode;
import com.google.common.collect.Lists;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

@Service
public class ResourceServiceImpl implements ResourceService {

	@Autowired
	private ResourceMapper resourceMapper;

	@Override
	public Resource getResourceById(Integer id) {
		return resourceMapper.selectByPrimaryKey(id);
	}

	/**
	 * 文件类型码表对应关系 typeint(11) NULL资源类型 0：音频 1：视频 2：图片
	 */
	private static Map<String, Integer> filetypeMap = new HashMap<String, Integer>();

	static {
		filetypeMap.put("mp3", ResultCode.RESOURCE_TYPE_VOICE);
		filetypeMap.put("caf", ResultCode.RESOURCE_TYPE_VOICE);
		filetypeMap.put("mp4", ResultCode.RESOURCE_TYPE_VIDEO);
		filetypeMap.put("mov", ResultCode.RESOURCE_TYPE_VIDEO);
		filetypeMap.put("MOV", ResultCode.RESOURCE_TYPE_VIDEO);
		filetypeMap.put("jpg", ResultCode.RESOURCE_TYPE_IMG);
		filetypeMap.put("jpeg", ResultCode.RESOURCE_TYPE_IMG);
		filetypeMap.put("png", ResultCode.RESOURCE_TYPE_IMG);
	}

	@Override
	public List<Integer> uploadFile(MultipartHttpServletRequest request, Integer source) throws IOException {
		// TODO Auto-generated method stub
		List<Integer> result = new ArrayList<Integer>();
		Map<String, MultipartFile> fileMap = request.getFileMap();
		for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
			MultipartFile mf = entity.getValue();
			// String filename = UUID.randomUUID().toString() + "_" +
			// mf.getOriginalFilename();
			String filename = UUID.randomUUID().toString();
			int filetypeindex = filename.lastIndexOf(".");
			String filetype = filename.substring(filetypeindex + 1);
			// 将文件保存到服务器
			String fileurlpath = FileSaveUtil.save(mf.getBytes(), filename);
			Resource resource = new Resource();
			resource.setCreattime(DateProcess.getSysTime());
			resource.setSource(source);
			resource.setType(filetypeMap.get(filetype));
			resource.setUrl(fileurlpath);
			resourceMapper.insert(resource);
			result.add(resource.getId());
		}
		return result;
	}

	@Override
	public List<Integer> savePDFToImg(Integer pdfResourceID, Integer source, int width, int height)
			throws IOException, PdfException {
		// TODO Auto-generated method stub
		List<Integer> result = new ArrayList<Integer>();
		ResourceBundle bundle = ResourceBundle.getBundle("sysconf");
		// 文件绝对路径
		String fileServerAbsoultLocation = bundle.getString("FileServerAbsoluteLocation");
		// 查询出PDF文件的访问地址
		Example record = new Example(Resource.class);
		Criteria criteria = record.createCriteria();
		criteria.andEqualTo("id", pdfResourceID);
		List<Resource> resources = resourceMapper.selectByExample(record);
		for (Resource resource : resources) {
			String pdfURL = fileServerAbsoultLocation + resource.getUrl();
			// 将PDF转化为JPG并保存
			List<String> jpgpaths = FileSaveUtil.pdfSaveToJpg(pdfURL, width, height);
			for (String jpgpath : jpgpaths) {
				String imgurl = jpgpath;
				Resource resourceImg = new Resource();
				resourceImg.setCreattime(DateProcess.getSysTime());
				resourceImg.setSource(source);
				resourceImg.setType(2);// 图片是2
				resourceImg.setUrl(imgurl);
				resourceMapper.insert(resourceImg);
				result.add(resourceImg.getId());
			}
		}
		return result;
	}

	@Override
	public Resource uploadFileResouce(MultipartHttpServletRequest request, Integer source) throws IOException {
		Map<String, MultipartFile> fileMap = request.getFileMap();
		Resource resource = null;
		for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) {
			MultipartFile mf = entity.getValue();
			String filename = UUID.randomUUID().toString() + "_" + mf.getOriginalFilename();
			int filetypeindex = filename.lastIndexOf(".");
			String filetype = filename.substring(filetypeindex + 1);
			// 将文件保存到服务器
			String fileurlpath = FileSaveUtil.save(mf.getBytes(), filename);
			resource = new Resource();
			resource.setCreattime(DateProcess.getSysTime());
			resource.setSource(source);
			resource.setType(filetypeMap.get(filetype));
			resource.setUrl(fileurlpath);
			resourceMapper.insert(resource);
		}
		resource.setUrl(FileSaveUtil.getTotalURLByUrl(resource.getUrl()));
		return resource;
	}

	@Override
	public List<Resource> queryResourceByIds(List<Page> pages, Integer resourceType) {
		List<Object> resourceId = Lists.newArrayList();
		for (Page p : pages) {
			resourceId.add(p.getResourceid());
		}
		Example example = new Example(Resource.class);
		example.createCriteria().andIn("id", resourceId).andEqualTo("type", resourceType);
		List<Resource> resources = resourceMapper.selectByExample(example);
		return CheckUtil.notEmpty(resources) ? resources : null;
	}

	@Override
	public Resource uploadFileResouce(byte[] filedata, Integer source, String filetype) throws Exception {
		// TODO Auto-generated method stub
		Resource resource = null;
		String filename = UUID.randomUUID().toString()+"."+filetype;
		// 将文件保存到服务器
		String fileurlpath = FileSaveUtil.save(filedata, filename);
		resource = new Resource();
		resource.setCreattime(DateProcess.getSysTime());
		resource.setSource(source);
		resource.setType(filetypeMap.get(filetype));
		resource.setUrl(fileurlpath);
		resourceMapper.insert(resource);
		resource.setUrl(FileSaveUtil.getTotalURLByUrl(resource.getUrl()));
		return resource;
	}

	@Override
	public List<Resource> queryResource(Map<String, Object> map) {
		return resourceMapper.queryResource(map);
	}

	@Override
	public Resource uploadFileResouce(String filedata, Integer source, String filetype) throws Exception {
		// TODO Auto-generated method stub
		// String filetype = "";
		// filetype = filedata.split("<")[0];
		filedata = filedata.split("<")[1];
		filedata = filedata.replace("<", "");
		filedata = filedata.replace(">", "");
		filedata = filedata.trim();
		filedata = filedata.replace(" ", "");
		System.out.println(filedata.length());
		System.out.println(filetype.length());
		System.out.println(filetype);
		System.out.println(filedata.substring(0, 10));
		String fileurlpath = FileSaveUtil.save(FileSaveUtil.fromHexString(filedata),
				UUID.randomUUID().toString() + "." + filetype);
		Resource resource = new Resource();
		resource.setCreattime(DateProcess.getSysTime());
		resource.setSource(source);
		resource.setType(filetypeMap.get(filetype));
		resource.setUrl(fileurlpath);
		resourceMapper.insert(resource);// 入库入相对的URL
		resource.setUrl(FileSaveUtil.getTotalURLByUrl(fileurlpath)); // 返回可访问的URL
		return resource;
	}

}
