package com.cgq.controller;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.cgq.model.Resource;
import com.cgq.service.ResourceService;
import com.cgq.util.ResultCode;
import com.google.common.collect.Maps;

@Controller
public class UploadFileController {

	@Autowired
	private ResourceService resourceService;
	
	@RequestMapping("/upload")
	@ResponseBody
	public Map<String,Object> uploadFile(HttpServletRequest request,HttpSession session){
		
		
MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		Map<String,Object> data = Maps.newHashMap();
		
		String savePath="D://";
        Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
        String fileName = "";
        String fileExt = "";
        for (Map.Entry<String, MultipartFile> entity : fileMap.entrySet()) { 
        	 // 上传文件名  
            System.out.println("key: " + entity.getKey());  
        	 MultipartFile mf = entity.getValue();  
            fileName = mf.getOriginalFilename();
            //回传给前台文件名称
    		data.put("fileSimpleName", fileName);
    		// 扩展名格式：  
            if (fileName.lastIndexOf(".") >= 0) {  
            	fileExt = fileName.substring(fileName.lastIndexOf("."));  
            }  
            //随机生成文件名
            File uploadFile = null;  
            do {  
                // 生成文件名：  
            	fileName = UUID.randomUUID().toString();  
            	uploadFile = new File(savePath + fileName + fileExt);  
            } while (uploadFile.exists());  
            
            
            try {
	    		FileCopyUtils.copy(mf.getBytes(), uploadFile);
            } catch (IOException e) {
            	e.printStackTrace();
            }  
        }
		
		return data;
		
	}
	
	
	
	@RequestMapping("/uploadResource")
	@ResponseBody
	public Map<String,Object> uploadResource(HttpServletRequest request){
		Map<String,Object> data = Maps.newHashMap();
		MultipartHttpServletRequest req = (MultipartHttpServletRequest) request;
		try {
				Resource resource =	resourceService.uploadFileResouce(req, 0);
				data.put("code",ResultCode.RESULT_CODE_SUCCESS);
				data.put("msg",ResultCode.RESULT_CODE_SUCCESS_MSG);
				data.put("resource", resource);
		} catch (IOException e) {
			data.put("code",ResultCode.RESULT_CODE_ERROR);
			data.put("msg",ResultCode.RESULT_CODE_ERROR_MSG);
				e.printStackTrace();
		}
		
		return data;
		
	}
	
}
